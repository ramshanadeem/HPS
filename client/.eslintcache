[{"C:\\HPS\\client\\src\\index.js":"1","C:\\HPS\\client\\src\\App.js":"2","C:\\HPS\\client\\src\\reportWebVitals.js":"3","C:\\HPS\\client\\src\\components\\list\\List.js":"4","C:\\HPS\\client\\src\\components\\Dialog.js":"5","C:\\HPS\\client\\src\\components\\Icons\\Icons.js":"6","C:\\HPS\\client\\src\\components\\Stepper.js":"7","C:\\HPS\\client\\src\\components\\service\\Service.js":"8","C:\\HPS\\client\\src\\components\\register\\Register.js":"9","C:\\HPS\\client\\src\\components\\welfare\\Welfare.js":"10","C:\\HPS\\client\\src\\components\\GlobalHeader.js":"11","C:\\HPS\\client\\src\\components\\welfare\\Materialtable.js":"12","C:\\HPS\\client\\src\\components\\Popup.js":"13"},{"size":517,"mtime":1615907268449,"results":"14","hashOfConfig":"15"},{"size":216,"mtime":1615907268433,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1615907268449,"results":"17","hashOfConfig":"15"},{"size":5014,"mtime":1616527072891,"results":"18","hashOfConfig":"15"},{"size":1587,"mtime":1615907268433,"results":"19","hashOfConfig":"15"},{"size":2206,"mtime":1615907268433,"results":"20","hashOfConfig":"15"},{"size":4713,"mtime":1615907268433,"results":"21","hashOfConfig":"15"},{"size":10608,"mtime":1616519606233,"results":"22","hashOfConfig":"15"},{"size":25449,"mtime":1616516235683,"results":"23","hashOfConfig":"15"},{"size":23414,"mtime":1616517929342,"results":"24","hashOfConfig":"15"},{"size":2141,"mtime":1615907268433,"results":"25","hashOfConfig":"15"},{"size":1996,"mtime":1615907268449,"results":"26","hashOfConfig":"15"},{"size":779,"mtime":1615907268433,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1pglvmx",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},"C:\\HPS\\client\\src\\index.js",[],["66","67"],"C:\\HPS\\client\\src\\App.js",["68"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport List from './components/list/List.js'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <List />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\HPS\\client\\src\\reportWebVitals.js",[],"C:\\HPS\\client\\src\\components\\list\\List.js",["69","70","71","72"],"import React, { useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport ReactDOM from 'react-dom'\r\nimport MaterialTable from 'material-table'\r\nimport { Dialog } from '@material-ui/core';\r\nimport FormDialog from '../Dialog';\r\nimport { tableIcons } from '../Icons/Icons';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nconst List = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const [data, setData] = React.useState([])\r\n    const [columns, setColumns] = React.useState([\r\n    \r\n        { title: 'TokenNo', field: 'TokenNo' },\r\n        { title: 'Registeration Date', field: 'RegistrationDate' },\r\n        { title: 'MR No', field: 'MRNo' },\r\n        { title: 'Patient Name', field: 'Name', },\r\n        { title: 'Ref By', field: 'RefBy' },\r\n        { title: 'Age', field: 'Age', type: 'numeric' },\r\n        { title: 'Cast', field: 'Cast', type: 'String' }\r\n    ]);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:4000/api/Regusers/')\r\n            .then((res) => {\r\n                console.log(\"bdj\")\r\n                console.log(res.data);\r\n                setData(res.data.data);\r\n            })\r\n            .catch((e) => console.log(e));\r\n    }, []);\r\n    const handleDelete = (id) => {\r\n        axios.delete(`http://localhost:4000/api/Regusers/${data[id]._id}`)\r\n        .then(\r\n            (res) => {\r\n              console.log('Post was deleted successfully', res);\r\n              \r\n            })\r\n          .catch((err) => console.log(err));\r\n    }\r\nconst handleUpdate = (id) => {\r\n        axios.put(`http://localhost:4000/api/Regusers/${data[id]._id}`)\r\n        .then(\r\n            (res) => {\r\n              console.log('Post was update successfully', res);\r\n              \r\n            })\r\n          .catch((err) => console.log(err));\r\n    } \r\n\r\n    return (\r\n        <div style={{ maxWidth: '90%', margin: 'auto' }}>\r\n            <FormDialog open={open} onClose={handleClose} />\r\n            <MaterialTable\r\n                title=\"Dummy Data\"\r\n                columns={columns}\r\n                data={data}\r\n\r\n                actions={[\r\n                    {\r\n                        icon: AddIcon,\r\n                        tooltip: 'Add',\r\n                        isFreeAction: true,\r\n                        onClick: handleClickOpen,\r\n\r\n                    },\r\n                    //     icon: AddIcon,\r\n                    //     tooltip: 'Add',\r\n                    //     onClick: handleClickOpen,\r\n                    // }\r\n                ]}  // {\r\n\r\n                editable={{\r\n                  /*   isEditable: rowData => rowData.name === 'a', // only name(a) rows would be editable\r\n                    isEditHidden: rowData => rowData.name === 'x',\r\n                    isDeletable: rowData => rowData.name === 'b', // only name(b) rows would be deletable,\r\n                    isDeleteHidden: rowData => rowData.name === 'y',\r\n                    onBulkUpdate: changes =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n\r\n                                resolve();\r\n                            }, 1000);\r\n                        }),\r\n                    onRowAddCancelled: rowData => console.log('Row adding cancelled'),\r\n                    onRowUpdateCancelled: rowData => console.log('Row editing cancelled'),\r\n                    onRowAdd: newData =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n\r\n                                resolve();\r\n                            }, 1000);\r\n                        }), */\r\n                 onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n                                const dataUpdate = [...data];\r\n                                const index = oldData.tableData.id;\r\n                                dataUpdate[index] = newData;\r\n                                setData([...dataUpdate]);\r\n                                handleUpdate(oldData.tableData.id)\r\n\r\n                                resolve();\r\n                            }, 1000);\r\n                        }), \r\n                        onRowDelete: oldData =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n                                const dataDelete = [...data];\r\n                                const index = oldData.tableData.id;\r\n                                dataDelete.splice(index, 1);\r\n                                setData([...dataDelete]);\r\n                                handleDelete(oldData.tableData.id)\r\n                                resolve();\r\n                            }, 1000);\r\n                        })\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","C:\\HPS\\client\\src\\components\\Dialog.js",["73","74","75","76","77","78","79","80","81","82","83","84","85","86"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport HorizontalLinearStepper from './Stepper';\r\n\r\n\r\n\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Slide from '@material-ui/core/Slide';\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function FormDialog({ open, onClose }) {\r\n  const classes = useStyles();\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogContent>\r\n          <HorizontalLinearStepper />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n\r\n  );\r\n}","C:\\HPS\\client\\src\\components\\Icons\\Icons.js",[],"C:\\HPS\\client\\src\\components\\Stepper.js",["87","88","89"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Register from './register/Register';\r\nimport Services from './service/Service';\r\nimport Welfare from './welfare/Welfare';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction getSteps() {\r\n  return ['Registeration', 'Welfare', 'Services'];\r\n}\r\n\r\nfunction getStepContent(step, handleNext, handleBack) {\r\n  switch (step) {\r\n    case 0:\r\n      return <Register next={handleNext} back={handleBack} />;\r\n    case 1:\r\n      return <Welfare next={handleNext} back={handleBack} />;\r\n    case 2:\r\n      return <Services next={handleNext} back={handleBack} />;\r\n    default:\r\n      return 'Unknown step';\r\n  }\r\n}\r\n\r\nexport default function HorizontalLinearStepper({ handleClose }) {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [skipped, setSkipped] = React.useState(new Set());\r\n  const steps = getSteps();\r\n\r\n  const isStepOptional = (step) => {\r\n    return step === 1;\r\n  };\r\n\r\n  const isStepSkipped = (step) => {\r\n    return skipped.has(step);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    let newSkipped = skipped;\r\n    if (activeStep == 2) {\r\n      handleClose()\r\n    }\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values());\r\n      newSkipped.delete(activeStep);\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped(newSkipped);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    if (activeStep == 0) {\r\n      handleClose()\r\n    } else {\r\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    }\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this,\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\");\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped((prevSkipped) => {\r\n      const newSkipped = new Set(prevSkipped.values());\r\n      newSkipped.add(activeStep);\r\n      return newSkipped;\r\n    });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper activeStep={activeStep}>\r\n        {steps.map((label, index) => {\r\n          const stepProps = {};\r\n          const labelProps = {};\r\n          if (isStepOptional(index)) {\r\n            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n          }\r\n          if (isStepSkipped(index)) {\r\n            stepProps.completed = false;\r\n          }\r\n          return (\r\n            <Step key={label} {...stepProps}>\r\n              <StepLabel {...labelProps}>{label}</StepLabel>\r\n            </Step>\r\n          );\r\n        })}\r\n      </Stepper>\r\n      <div>\r\n        {activeStep === steps.length ? (\r\n          <div>\r\n            <Typography className={classes.instructions}>\r\n              All steps completed - you&apos;re finished\r\n            </Typography>\r\n            <Button onClick={handleReset} className={classes.button}>\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n            <div>\r\n              <Typography className={classes.instructions}>{getStepContent(activeStep, handleNext, handleBack)}</Typography>\r\n              <div>\r\n                {/* <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                  Back\r\n              </Button> \r\n                {isStepOptional(activeStep) && (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleSkip}\r\n                    className={classes.button}\r\n                  >\r\n                    Skip\r\n                  </Button>\r\n                )}*/}\r\n\r\n                {/* <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleNext}\r\n                  className={classes.button}\r\n                >\r\n                  {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                </Button> */}\r\n              </div>\r\n            </div>\r\n          )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\HPS\\client\\src\\components\\service\\Service.js",["90","91","92","93","94","95","96","97","98","99","100","101","102","103","104"],"import React, { useState,useEffect} from 'react';\r\n/* import ReactDOM from 'react-dom'; */\r\nimport { Form, Field } from 'react-final-form';\r\nimport { Checkbox, Radio, Select } from 'final-form-material-ui';\r\nimport axios from 'axios';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  Link,\r\n  Grid,\r\n  Button,\r\n  CssBaseline,\r\n  RadioGroup,\r\n  FormLabel,\r\n  MenuItem,\r\n  FormGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\n// Picker\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport GlobalHeader from '../GlobalHeader';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nconst defaultProps = {\r\n  bgcolor: 'background.paper',\r\n  m: 1,\r\n  style: { width: '5rem', height: '5rem' },\r\n  borderColor: 'text.primary',\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nfunction DatePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <DatePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TimePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <TimePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\n/* const onSubmit = async values => {\r\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n  await sleep(300);\r\n  window.alert(JSON.stringify(values, 0, 2));\r\n}; */\r\n\r\n\r\nconst validate = values => {\r\n  const errors = {};\r\n  if (!values.firstName) {\r\n    errors.firstName = 'Required';\r\n  }\r\n  if (!values.lastName) {\r\n    errors.lastName = 'Required';\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required';\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default function Services({ next, back }) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState('Controlled');\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date('2014-08-18T21:11:54'));\r\n\r\n  const [Header, setHeader] = useState({\r\n    TokenNo: \"\",\r\n    ServiceDate: new Date(),\r\n    MRNo: 'recID',\r\n    Ward: \"\",\r\n    Amount: \"\",\r\n    TotalAmount: \"\",\r\n    PatientContribution: \"\",\r\n    Remarks: \"\",\r\n    CreatedUser: \"Admin\",\r\n    ModifyUser: \"Admin\"\r\n  })\r\n  const handleSubmit = async (e) => {\r\n    //validate();\r\n    e.preventDefault();\r\n    setHeader(e.target.value);\r\n    next();\r\n    const res = await axios.post(\"http://localhost:4000/api/Serviceuser/add\", Header)\r\n    console.log(res);\r\n  }\r\n  useEffect(() => {\r\n\r\n    axios.get(\"http://localhost:4000/api/Serviceuser\")\r\n      .then(res => {\r\n        console.log(\"bdj\")\r\n        console.log(res.data)\r\n\r\n      })\r\n  }, [])\r\n\r\n\r\n \r\n\r\n\r\n  /*   const handleChange = (prop) => (event) => {\r\n      setValues({ ...values, [prop]: event.target.value });\r\n    };\r\n   */\r\n  /*   const handleClickShowPassword = () => {\r\n      setValues({ ...values, showPassword: !values.showPassword });\r\n    }; */\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{ padding: 16, margin: 'auto' }}>\r\n      <GlobalHeader onSubmit={handleSubmit} back={back} title=\"Services\" />\r\n\r\n      <CssBaseline />\r\n      <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\r\n        🏁 Services\r\n      </Typography>\r\n      <Form\r\n       action=\"http://localhost:4000/api/Serviceuser/add\"\r\n        onSubmit={handleSubmit}\r\n        initialValues={{ employed: true, stooge: 'larry' }}\r\n        validate={validate}\r\n        render={({ handleSubmit, reset, submitting, pristine, values }) => (\r\n          <form noValidate>\r\n            <Paper style={{ padding: 16 }}>\r\n              <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                <Grid item xs={2}>\r\n                  <TextField\r\n                    id=\"outlined-uncontrolled\"\r\n                    label=\"MR#\"\r\n                    defaultValue=\"0\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"Token No\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Token No\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"Gender\"\r\n                    component={Select}\r\n                    label=\"Gender\"\r\n                    variant=\"outlined\"\r\n                    formControlProps={{ fullWidth: true }}\r\n                    value={Header.Gender}\r\n                    onChange={(e) => setHeader({ ...Header, Gender: e.target.value })}\r\n                  >\r\n                    <MenuItem value=\"male\">male</MenuItem>\r\n                    <MenuItem value=\"female\">Female</MenuItem>\r\n                    <MenuItem value=\"Budapest\">\r\n                      other\r\n                    </MenuItem>\r\n                  </Field>\r\n                </Grid>\r\n\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid container justify=\"space-around\" item xs={3}>\r\n\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      variant=\"outlined\"\r\n                      format=\"MM/dd/yyyy\"\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-inline\"\r\n\r\n                      label=\"WelfareDate\"\r\n                      value={selectedDate}\r\n                      onChange={handleDateChange}\r\n                      KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"WARD\"\r\n                    component={Select}\r\n                    label=\"Ward\"\r\n                    variant=\"outlined\"\r\n                    formControlProps={{ fullWidth: true }}\r\n                    value={Header.Gender}\r\n                    onChange={(e) => setHeader({ ...Header, Gender: e.target.value })}\r\n                  >\r\n                    <MenuItem value=\"1\">shift1</MenuItem>\r\n                    <MenuItem value=\"2\">shift2</MenuItem>\r\n                    <MenuItem value=\"3\">\r\n                      shift3\r\n                    </MenuItem>\r\n                  </Field>\r\n                </Grid>\r\n\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"Amount\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Amount\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Amount}\r\n                    onChange={(e) => setHeader({ ...Header, Amount: e.target.value })}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"TotalAmount\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Total Amount\"\r\n                    variant=\"outlined\"\r\n                    value={Header.TotalAmount}\r\n                    onChange={(e) => setHeader({ ...Header, TotalAmount: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"Patient Contribution\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Patient Contribution\"\r\n                    variant=\"outlined\"\r\n                    value={Header.PatientContribution}\r\n                    onChange={(e) => setHeader({ ...Header, PatientContribution: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"Remark\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Remark\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Remarks}\r\n                    onChange={(e) => setHeader({ ...Header, Remarks: e.target.value })}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <h4>Details</h4>\r\n                </Grid>\r\n                {/* <Grid item xs={12}>\r\n                  <div style={{ display: \"inline\" }}><h4>TABLE BANYGA AB</h4></div>\r\n                </Grid> */}\r\n\r\n\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    onClick={reset}\r\n                    disabled={submitting || pristine}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    disabled={submitting}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n            <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n          </form>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\HPS\\client\\src\\components\\register\\Register.js",["105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125"],"import React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { Checkbox, Radio, Select } from 'final-form-material-ui';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport clsx from 'clsx';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Box from '@material-ui/core/Box';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Popup from '../Popup';\r\nimport axios from 'axios';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  Link,\r\n  Grid,\r\n  Button,\r\n  CssBaseline,\r\n  RadioGroup,\r\n  FormLabel,\r\n  MenuItem,\r\n  FormGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\n// Picker\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport GlobalHeader from '../GlobalHeader';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nconst defaultProps = {\r\n  bgcolor: 'background.paper',\r\n  m: 1,\r\n  style: { width: '5rem', height: '5rem' },\r\n  borderColor: 'text.primary',\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\nexport default function Register({ next, back }) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState('Controlled');\r\n  const [err, setErr] = useState('')\r\n  const [posts, setposts] = useState([]);\r\n  const [options, setOptions] = useState(false)\r\n  const [disableHelpType, setdisableHelpType] = React.useState('block')\r\n  const [open, setOpen] = useState(false)\r\n  /*   const handlereligion = (val) => {\r\n      if (val != \"Islam\") {\r\n        setdisableHelpType(true)\r\n  \r\n  \r\n      }\r\n      else {\r\n        setdisableHelpType(false)\r\n      }\r\n    } */\r\n  const handleOption = (val) => {\r\n    if (val !== 'islam') {\r\n      setdisableHelpType('none')\r\n    }\r\n  }\r\n\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date('2014-08-18T21:11:54'));\r\n  const [Header, setHeader] = useState({\r\n    MRNo: \"\",\r\n    TokenNo: \"\",\r\n    RegistrationDate: new Date(),\r\n    Name: \"\",\r\n    FatherOrHusband: \"\",\r\n    DOB: new Date(),\r\n    Age: \"\",\r\n    Gender: \"\",\r\n    Religion: \"\",\r\n    District: \"\",\r\n    City: \"\",\r\n    Area: \"\",\r\n    HousNo: \"\",\r\n    Address: \"\",\r\n    CNIC: \"\",\r\n    Phone: \"\",\r\n    OffPhone: \"\",\r\n    Mobile: \"\",\r\n    RefBy: \"\",\r\n    Remarks: \"\",\r\n    IsRejected: false,\r\n    IsZakat: false,\r\n    IsPAFEmp: false,\r\n    MonthlyConsLimit: 0,\r\n    ThumbImage: \"\",\r\n    NOY: \"\",\r\n    EmpID: \"\",\r\n    IsStaff: false,\r\n    CreateUser: \"\",\r\n    ModifyUser: \"\",\r\n    CreateDate: \"\",\r\n    ModifyDate: \"\"\r\n  });\r\n  const validate = () => {\r\n    if (Header.TokenNo === '' || Header.TokenNo === undefined || Header.TokenNo === null) {\r\n      setErr('Token is missing')\r\n      setOpen(true)\r\n      return false;\r\n    }\r\n    else if (Header.RegistrationDate === '' || Header.RegistrationDate === undefined || Header.RegistrationDate === null) {\r\n      setErr('RegistrationDate is missing')\r\n      return false;\r\n    }\r\n    else if (Header.Name === '' || Header.Name === undefined || Header.Name === null) {\r\n      setErr('Name is missing')\r\n      return false;\r\n    }\r\n    else if (Header.FatherOrHusband === '' || Header.FatherOrHusband === undefined || Header.FatherOrHusband === null) {\r\n      setErr('FatherOrHusband is missing')\r\n      return false;\r\n    }\r\n    else if (Header.DOB === '' || Header.DOB === undefined || Header.DOB === null) {\r\n      setErr('Date of Birth is missing')\r\n      return false;\r\n    }\r\n    else if (Header.Age === '' || Header.Age === undefined || Header.Age === null) {\r\n      setErr('Age is missing')\r\n      return false;\r\n    }\r\n    else if (Header.Gender === '' || Header.Gender === undefined || Header.Gender === null) {\r\n      setErr('Gender is missing')\r\n      return false;\r\n    }\r\n    else if (Header.Religion === '' || Header.Religion === undefined || Header.Religion === null) {\r\n      setErr('Religion is missing')\r\n      return false;\r\n    }\r\n    else if (Header.IsZakat === '' || Header.IsZakat === undefined || Header.IsZakat === null) {\r\n      setErr('Zakaat is missing')\r\n      return false;\r\n    }\r\n    else if (Header.CNIC === '' || Header.CNIC === undefined || Header.CNIC === null) {\r\n      setErr('CNIC is missing')\r\n      return false;\r\n    }\r\n\r\n    else if (Header.HousNo === '' || Header.HousNo === undefined || Header.HousNo === null) {\r\n      setErr('House No is missing')\r\n      return false;\r\n    }\r\n    else if (Header.Address === '' || Header.Address === undefined || Header.Address === null) {\r\n      setErr('Address is missing')\r\n      return false;\r\n    }\r\n    else if (Header.Area === '' || Header.Area === undefined || Header.Area === null) {\r\n      setErr('Area is missing')\r\n      return false;\r\n    }\r\n    else if (Header.City === '' || Header.City === undefined || Header.City === null) {\r\n      setErr('Ciy is missing')\r\n      return false;\r\n    }\r\n\r\n    else if (Header.Mobile === '' || Header.Mobile === undefined || Header.Mobile === null) {\r\n      setErr('Mobile is missing')\r\n      return false;\r\n    }\r\n    else if (Header.EmpID === '' || Header.EmpID === undefined || Header.EmpID === null) {\r\n      setErr('Employee ID is missing')\r\n      return false;\r\n    }\r\n    else if (Header.NOY === '' || Header.Name === undefined || Header.Name === null) {\r\n      setErr('NOY is missing')\r\n      return false;\r\n    }\r\n    else if (Header.IsPAFEmp === '' || Header.IsPAFEmp === undefined || Header.IsPAFEmp === null) {\r\n      setErr('PAF Employee is missing')\r\n      return false;\r\n    }\r\n\r\n    else if (Header.IsRejected === '' || Header.IsRejected === undefined || Header.IsRejected === null) {\r\n      setErr('Rejection is missing')\r\n      return false;\r\n    }\r\n\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n\r\n    e.preventDefault();\r\n    setHeader(e.target.value);\r\n\r\n    console.log(Header);\r\n    next();\r\n    const res = await axios.post(\"http://localhost:4000/api/Regusers/add\", Header)\r\n    console.log(res);\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    axios.get(\"http://localhost:4000/api/Regusers\")\r\n      .then(res => {\r\n        console.log(\"bdj\")\r\n        console.log(res.data)\r\n\r\n      })\r\n  }, [])\r\n  /*  useEffect(() => {\r\n     axios.get('http://localhost:4000/api/users/')\r\n       .then((res) => {\r\n         console.log(res.data);\r\n         setstate(res.data.data);\r\n       })\r\n       .catch((e) => console.log(e));\r\n   }, []);\r\n  */\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n\r\n\r\n\r\n  /*   const handleChange = (event) => {\r\n      setValue(event.target.value);\r\n    }; */\r\n\r\n  /*  useEffect(() => {\r\n     axios.post(\"http://localhost:4000/api/Regusers\", Header)\r\n       .then((res) => {\r\n         console.log(res.data);\r\n         setHeader(res.data.Header)\r\n       })\r\n       .catch((e) => console.log(e));\r\n   }, []); */\r\n  return (\r\n    <>\r\n      <Popup msg={err} open={open} handleClose={() => setOpen(false)} />\r\n      <GlobalHeader forward={handleSubmit} back={back} title=\"Registeration\" />\r\n      <div style={{ padding: 16, margin: 'auto' }}>\r\n\r\n        <CssBaseline />\r\n        <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\r\n          🏁 Registeration\r\n      </Typography>\r\n\r\n        <Form\r\n          action=\"http://localhost:4000/api/Regusers/add\"\r\n          onSubmit={handleSubmit}\r\n          initialValues={{ employed: true, stooge: 'larry' }}\r\n          validate={validate}\r\n          render={({ handleSubmit, reset, submitting, pristine, values }) => (\r\n            <form className={classes.root} noValidate autoComplete=\"off\" noValidate>\r\n              <Paper style={{ padding: 16 }}>\r\n                <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                  <Grid item xs={3}>\r\n                    <Field\r\n                      fullWidth\r\n                      disabled\r\n                      id=\"filled-disabled\"\r\n                      required\r\n                      name=\"MR NO\"\r\n                      component={TextField}\r\n                      type=\"text\"\r\n                      label=\"MR NO\"\r\n                      variant=\"outlined\"\r\n\r\n                    />\r\n                  </Grid>\r\n\r\n\r\n\r\n                  <Grid item xs={3}>\r\n                    <Field\r\n                      fullWidth\r\n                      required\r\n                      name=\"Token No\"\r\n                      component={TextField}\r\n                      type=\"text\"\r\n                      label=\"Token No\"\r\n                      variant=\"outlined\"\r\n                      value={Header.TokenNo}\r\n                      //onClick={(e) => valid({ TokenNo: e.target.value })}\r\n                      onChange={(e) => setHeader({ ...Header, TokenNo: e.target.value })}\r\n\r\n                      label=\"TokenNo\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <Grid container justify=\"space-around\" item xs={3}>\r\n\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"outlined\"\r\n                        format=\"MM/dd/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-inline\"\r\n                        value={Header.RegistrationDate}\r\n                        label=\"Registration Date\"\r\n                        //value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                          'aria-label': 'change date',\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                  </MuiPickersUtilsProvider>\r\n\r\n                  <Grid item xs={3}>\r\n                    <Field\r\n                      name=\"name\"\r\n                      value={Header.Name}\r\n                      fullWidth\r\n                      required\r\n                      component={TextField}\r\n                      type=\"name\"\r\n                      onChange={(e) => setHeader({ ...Header, Name: e.target.value })}\r\n                      label=\"name\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={3}>\r\n                    <Field\r\n                      name=\"FNAME\"\r\n                      value={Header.FatherOrHusband}\r\n                      onChange={(e) => setHeader({ ...Header, FatherOrHusband: e.target.value })}\r\n                      fullWidth\r\n                      required\r\n                      component={TextField}\r\n                      type=\"FNAME\"\r\n                      label=\"FNAME\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <Grid container justify=\"space-around\" item xs={3}>\r\n\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"outlined\"\r\n                        format=\"MM/dd/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-inline\"\r\n\r\n                        label=\"Date of Birth\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                          'aria-label': 'change date',\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                  </MuiPickersUtilsProvider>\r\n                  <Grid>\r\n\r\n                  </Grid>\r\n                  <Grid item xs={3}>\r\n                    <Field\r\n                      name=\"Age\"\r\n                      fullWidth\r\n                      required\r\n                      component={TextField}\r\n                      type=\"number\"\r\n                      label=\"Age\"\r\n                      variant=\"outlined\"\r\n                      value={Header.Age}\r\n                      onChange={(e) => setHeader({ ...Header, Age: e.target.value })}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={3}>\r\n                    <Field\r\n                      fullWidth\r\n                      name=\"Gender\"\r\n                      component={Select}\r\n                      label=\"Gender\"\r\n                      variant=\"outlined\"\r\n                      formControlProps={{ fullWidth: true }}\r\n                      value={Header.Gender}\r\n                      onChange={(e) => setHeader({ ...Header, Gender: e.target.value })}\r\n                    >\r\n                      <MenuItem value=\"male\">male</MenuItem>\r\n                      <MenuItem value=\"female\">Female</MenuItem>\r\n                      <MenuItem value=\"Budapest\">\r\n                        other\r\n                    </MenuItem>\r\n                    </Field>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={3}>\r\n                    <Field\r\n                      fullWidth\r\n                      name=\"Religion\"\r\n                      component={Select}\r\n                      label=\"Religion\"\r\n                      variant=\"outlined\"\r\n                      value={Header.Religion}\r\n                      formControlProps={{ fullWidth: true }}\r\n\r\n                      value={Header.Religion}\r\n                      onChange={(e) => {\r\n                        handleOption(e.target.value)\r\n                        setHeader({ ...Header, Religion: e.target.value })\r\n                      }\r\n\r\n                      }\r\n                      disabled={options}\r\n                    >\r\n                      <MenuItem value=\"islam\">Islam</MenuItem>\r\n                      <MenuItem value=\"christian\">Christian</MenuItem>\r\n                      <MenuItem value=\"other\">Other</MenuItem>\r\n\r\n                    </Field>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={3}>\r\n                    <FormControl component=\"fieldset\">\r\n                      <FormLabel component=\"legend\">Help Type</FormLabel>\r\n                      <RadioGroup row>\r\n                        <FormControlLabel\r\n                          label=\"Zakat\"\r\n                          control={\r\n                            <Field\r\n                              name=\"help\"\r\n                              component={Radio}\r\n                              type=\"radio\"\r\n                              value=\"help1\"\r\n                              // value={Header.IsZakat}\r\n                              display={disableHelpType}\r\n                              onChange={(e) => console.log(e.target.value)}\r\n                            />\r\n\r\n                          }\r\n\r\n                        />\r\n                        <FormControlLabel\r\n                          label=\"Welfare\"\r\n                          control={\r\n                            <Field\r\n                              name=\"help\"\r\n                              component={Radio}\r\n                              type=\"radio\"\r\n\r\n                              value=\"help\"\r\n                              //  value={Header.IsRejected}\r\n                              onChange={(e) => console.log(e.target.value)}\r\n                            />\r\n                          }\r\n                        />\r\n\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Field\r\n                      fullWidth\r\n                      required\r\n                      name=\"Token No\"\r\n                      component={TextField}\r\n                      type=\"text\"\r\n                      label=\"CNIC\"\r\n                      variant=\"outlined\"\r\n                      value={Header.CNIC}\r\n                      onChange={(e) => setHeader({ ...Header, CNIC: e.target.value })}\r\n                    />\r\n                  </Grid>\r\n\r\n\r\n                  <Grid item xs={12}>\r\n\r\n                    <Typography>\r\n                      <h4 style={{ display: 'flex', justifyContent: 'center' }}>CONATCT</h4>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n                    required\r\n                    name=\"House No\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"House No\"\r\n                    variant=\"outlined\"\r\n                    value={Header.HousNo}\r\n                    onChange={(e) => setHeader({ ...Header, HousNo: e.target.value })}\r\n                  /></Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n\r\n                    name=\"address\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Address\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Address}\r\n                    onChange={(e) => setHeader({ ...Header, Address: e.target.value })}\r\n                  /></Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n\r\n                    name=\"Area\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Area\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Area}\r\n                    onChange={(e) => setHeader({ ...Header, Area: e.target.value })}\r\n                  /></Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n\r\n                    name=\"District\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"District\"\r\n                    variant=\"outlined\"\r\n                    value={Header.District}\r\n                    onChange={(e) => setHeader({ ...Header, District: e.target.value })}\r\n                  /></Grid>\r\n\r\n\r\n                  <Grid item xs={3} > <Field\r\n\r\n\r\n                    name=\"City\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"City\"\r\n                    variant=\"outlined\"\r\n                    value={Header.City}\r\n                    onChange={(e) => setHeader({ ...Header, City: e.target.value })}\r\n                  /></Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n\r\n                    name=\"Phone(res)\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Phone(res)\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Phone}\r\n                    onChange={(e) => setHeader({ ...Header, Phone: e.target.value })}\r\n                  /></Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n\r\n                    name=\"Phone(Off)\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Phone(Off)\"\r\n                    variant=\"outlined\"\r\n                    value={Header.OffPhone}\r\n                    onChange={(e) => setHeader({ ...Header, OffPhone: e.target.value })}\r\n                  /></Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n\r\n                    name=\"Mobile\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Mobile\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Mobile}\r\n                    onChange={(e) => setHeader({ ...Header, Mobile: e.target.value })}\r\n                  /></Grid>\r\n                  <TextField\r\n                    id=\"outlined-uncontrolled\"\r\n                    label=\"Monthly Consumtion Unit\"\r\n                    defaultValue=\"0\"\r\n                    variant=\"outlined\"\r\n                    value={Header.MonthlyConsLimit}\r\n                    onChange={(e) => setHeader({ ...Header, MonthlyConsLimit: e.target.value })}\r\n                  />\r\n\r\n\r\n                  <Grid item xs={12}>\r\n\r\n                    <Typography>\r\n                      <h4 style={{ display: 'flex', justifyContent: 'center' }}>Reffer Info</h4>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n                    required\r\n                    name=\"Refer By\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Refer By\"\r\n                    variant=\"outlined\"\r\n                    value={Header.RefBy}\r\n                    onChange={(e) => setHeader({ ...Header, RefBy: e.target.value })}\r\n                  /></Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n\r\n                    name=\"Employee Id\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Employee Id\"\r\n                    variant=\"outlined\"\r\n                    value={Header.IsPAFEmp}\r\n                    onChange={(e) => setHeader({ ...Header, EmpID: e.target.value })}\r\n                  /></Grid>\r\n                  <Grid item xs={3} > <Field\r\n\r\n\r\n                    name=\"NDY\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"NDY\"\r\n                    variant=\"outlined\"\r\n                    value={Header.NOY}\r\n                    onChange={(e) => setHeader({ ...Header, NOY: e.target.value })}\r\n                  /></Grid>\r\n                  <Grid item xs={5} > <Field\r\n\r\n\r\n                    name=\"Remark\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Remark\"\r\n                    variant=\"outlined\"\r\n                    onChange={(e) => setHeader({ ...Header, Remarks: e.target.value })}\r\n                    value={Header.Remark}\r\n                  /></Grid>\r\n                  <Grid item xs={12}>\r\n\r\n                    <Typography>\r\n                      <h4 style={{ display: 'flex', justifyContent: 'center' }}>Staff</h4>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <FormControl component=\"fieldset\">\r\n                      <FormLabel component=\"legend\"></FormLabel>\r\n                      <FormGroup row>\r\n                        <Grid >\r\n                          <FormControlLabel\r\n                            label=\"IS PAF EMPLOYEE\"\r\n                            control={\r\n                              <Field\r\n                                name=\"IS PAF EMPLOYEE\"\r\n                                component={Checkbox}\r\n                                type=\"checkbox\"\r\n                                value={Header.IsPAFEmp}\r\n                                onChange={(e) => setHeader({ ...Header, IsPAFEmp: !Header.IsPAFEmp })}\r\n\r\n                              />\r\n\r\n                            }\r\n                          />\r\n                        </Grid>\r\n                        <Grid >\r\n                          <FormControlLabel\r\n                            label=\"IS STAFF\"\r\n                            control={\r\n                              <Field\r\n                                name=\"IS STAFF\"\r\n                                component={Checkbox}\r\n                                type=\"checkbox\"\r\n                                value={Header.IsStaff}\r\n                                onChange={(e) => setHeader({ ...Header, IsStaff: !Header.IsStaff })}\r\n                                //onChange={e => setHeader({ ...Header, IsStaff: !Header.IsStaff })}\r\n                                label=\"Is Staff\"\r\n                              />\r\n                            }\r\n                          />\r\n                        </Grid>\r\n                        <Grid>\r\n                          <FormControlLabel\r\n                            label=\"Is Rejected\"\r\n                            control={\r\n                              <Field\r\n                                name=\"IsRejected\"\r\n                                component={Checkbox}\r\n                                type=\"checkbox\"\r\n                                value=\"IsRejected\"\r\n                                checked={Header.IsRejected} name=\"Is Rejected\" fullWidth\r\n\r\n                                onChange={e => setHeader({ ...Header, IsRejected: !Header.IsRejected })}\r\n\r\n\r\n                              />\r\n                            }\r\n                          />\r\n                        </Grid>\r\n\r\n\r\n\r\n                      </FormGroup>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n\r\n                  <Grid item style={{ marginTop: '16%' }}>\r\n                    <Button\r\n                      onClick={handleSubmit}\r\n                      type=\"button\"\r\n                      variant=\"contained\"\r\n                      // onClick={reset}\r\n                      disabled={submitting || pristine}\r\n                    >\r\n                      Reset\r\n                  </Button>\r\n                  </Grid>\r\n                  {/* <Grid item style={{ marginTop: '16%' }}>\r\n\r\n                    <Button variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      disabled={submitting} >submit</Button>\r\n\r\n                  </Grid> */}\r\n                </Grid>\r\n              </Paper>\r\n              <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n            </form>\r\n\r\n          )}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n","C:\\HPS\\client\\src\\components\\welfare\\Welfare.js",["126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146"],"import React, { useState, useEffect } from 'react';\r\n/* import ReactDOM from 'react-dom'; */\r\nimport { Form, Field } from 'react-final-form';\r\nimport { Checkbox, Radio, Select } from 'final-form-material-ui';\r\nimport { tableIcons } from '../Icons/Icons';\r\nimport axios from 'axios';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  Link,\r\n  Grid,\r\n  Button,\r\n  CssBaseline,\r\n  RadioGroup,\r\n  FormLabel,\r\n  MenuItem,\r\n  FormGroup,\r\n  FormControl,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\n// Picker\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport GlobalHeader from '../GlobalHeader';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Materialtable from './Materialtable';\r\nconst defaultProps = {\r\n  bgcolor: 'background.paper',\r\n  m: 1,\r\n  style: { width: '5rem', height: '5rem' },\r\n  borderColor: 'text.primary',\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nfunction DatePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <DatePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TimePickerWrapper(props) {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    meta,\r\n    ...rest\r\n  } = props;\r\n  const showError =\r\n    ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) &&\r\n    meta.touched;\r\n\r\n  return (\r\n    <TimePicker\r\n      {...rest}\r\n      name={name}\r\n      helperText={showError ? meta.error || meta.submitError : undefined}\r\n      error={showError}\r\n      inputProps={restInput}\r\n      onChange={onChange}\r\n      value={value === '' ? null : value}\r\n    />\r\n  );\r\n}\r\n\r\n/* const onSubmit = async values => {\r\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n  await sleep(300);\r\n  window.alert(JSON.stringify(values, 0, 2));\r\n}; */\r\n\r\n\r\nconst validate = values => {\r\n  const errors = {};\r\n  if (!values.firstName) {\r\n    errors.firstName = 'Required';\r\n  }\r\n  if (!values.lastName) {\r\n    errors.lastName = 'Required';\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required';\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default function Services({ next, back }) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState('Controlled');\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date('2014-08-18T21:11:54'));\r\n\r\n  const [Header, setHeader] = useState({\r\n    MRNo: 'recID',\r\n    TokenNo: \"\",\r\n    ISPAF: \"\",\r\n    ISSTAFF: \"\",\r\n    WelfareDate: new Date(),\r\n    Profession: \"\",\r\n    Fiqa: \"\",\r\n    Education: '',\r\n    Cast: \"\",\r\n    MonthlyIncome: 0,\r\n    Guardian: \"\",\r\n    OtherInfo: \"\",\r\n    MaleKids: \"\",\r\n    FemaleKids: \"\",\r\n    OtherKids: \"\",\r\n    Brothers: \"\",\r\n    Sisters: \"\",\r\n    NoOFFamilyMembers: \"\",\r\n    IsMarried: false,\r\n    IsAbleToPay: false,\r\n    IsEarning: false,\r\n    HaveGold: false,\r\n    ReqName: '',\r\n    ReqPhone: \"\",\r\n    ReqRelationWithPatient: '',\r\n    CreateUser: \"Admin\",\r\n    ModifyUser: \"Admin\",\r\n  })\r\n  var newRowsArr = [];\r\n  const handleSubmit = async (e) => {\r\n\r\n    /*  e.preventDefault();\r\n     setHeader(e.target.value);\r\n \r\n     console.log(Header);\r\n     next();\r\n     const res = await axios.post(\"http://localhost:4000/api/Welfareuser/add\", Header)\r\n     console.log(res); */\r\n    e.preventDefault();\r\n    setHeader(e.target.value);\r\n\r\n    console.log(Header);\r\n    next();\r\n    const res = await axios.post(\"http://localhost:4000/api/Welfareuser/add\", Header)\r\n    console.log(res);\r\n\r\n  }\r\n  useEffect(() => {\r\n\r\n    axios.get(\"http://localhost:4000/api/Welfareuser\")\r\n      .then(res => {\r\n        console.log(\"bdj\")\r\n        console.log(res.data)\r\n\r\n      })\r\n  }, [])\r\n\r\n\r\n\r\n  /* const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  }; */\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n  const [recID, setrecID] = useState('MR0000000012')\r\n  const [property, setProperty] = useState({\r\n    error: '',\r\n    open: false,\r\n    severity: '',\r\n    viewList: false,\r\n    editList: false,\r\n    newList: true,\r\n    loadingOnSave: false,\r\n    dialogOpen: false,\r\n    locationLookup: true,\r\n    BatchLookup: true,\r\n  })\r\n  const [loading, setLoading] = useState(false);\r\n  const [ItemTable, SetItemTable] = useState(\r\n    {\r\n      columns: [\r\n        {\r\n          title: 'Member Name', field: 'MemberName',\r\n          cellStyle: {\r\n            width: '25%'\r\n          },\r\n          render: (rowData) => (<input type=\"text\" name=\"MemberName\" />)\r\n        },\r\n        {\r\n          title: 'RelationWithPatient', field: 'RelationWithPatient',\r\n          cellStyle: {\r\n            width: '25%'\r\n          },\r\n          render: (rowData) => (<input type=\"text\" name=\"RelationWithPatient\" />)\r\n        },\r\n        {\r\n          title: 'Monthly Income', field: 'MonthlyIncome',\r\n          cellStyle: {\r\n            width: '25%'\r\n          },\r\n          render: (rowData) => (<input type=\"text\" name=\"MonthlyIncome\" />)\r\n        },\r\n      ], rows: []\r\n    });\r\n\r\n  const AddRow = () => {\r\n    console.log(ItemTable.rows);\r\n    let arr = ItemTable.rows\r\n    let check = arr.filter((data) => {\r\n      return data.MemberName === \"\" || data.RelationWithPatient === \"\"\r\n    })\r\n\r\n    if (check.length > 0) {\r\n      setProperty({\r\n        ...property,\r\n        msg: \"Please Completely Fill Previous row\",\r\n        severity: 'error',\r\n        open: true,\r\n      });\r\n    }\r\n    else {\r\n      // setProperty({ ...property, CurrencyLookup: true })\r\n      console.log('faaa');\r\n      let Item = {\r\n        MRNo: recID,\r\n        MemberName: \"\",\r\n        RelationWithPatient: \"\",\r\n        MonthlyIncome: \"\"\r\n      }\r\n\r\n      arr.push({ ...Item })\r\n      newRowsArr = arr\r\n      SetItemTable({ ...ItemTable, rows: arr })\r\n      console.log(ItemTable.rows);\r\n    }\r\n  }\r\n  const updateTableData = (e, rowData, prop) => {\r\n    let arr = newRowsArr;\r\n    let index = arr.indexOf(rowData)\r\n    arr[index][prop] = e\r\n    SetItemTable({ ...ItemTable, rows: arr })\r\n    newRowsArr = arr\r\n  }\r\n  const onClickDelete = (rowData) => {\r\n    let arr = ItemTable.rows\r\n    let index = arr.indexOf(rowData)\r\n    arr.splice(index, 1)\r\n    SetItemTable({ ...ItemTable, rows: arr })\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: 16, margin: 'auto' }}>\r\n      <GlobalHeader forward={handleSubmit} back={back} title=\"Welfare\" />\r\n\r\n      <CssBaseline />\r\n      <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\r\n        🏁 Welfare\r\n      </Typography>\r\n      <Form\r\n        action=\"http://localhost:4000/api/Welfareuser/add\"\r\n        onSubmit={handleSubmit}\r\n        initialValues={{ employed: true, stooge: 'larry' }}\r\n        validate={validate}\r\n        render={({ handleSubmit, reset, submitting, pristine, values }) => (\r\n          <form noValidate>\r\n            <Paper style={{ padding: 16 }}>\r\n              <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                <Grid item xs={2}>\r\n                  <TextField\r\n                    id=\"outlined-uncontrolled\"\r\n                    label=\"MR#\"\r\n                    defaultValue=\"0\"\r\n                    variant=\"outlined\"\r\n                    value={Header.MRNo}\r\n                    onChange={(e) => setHeader({ ...Header, MRNo: e.target.value })} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"Token No\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Token No\"\r\n                    variant=\"outlined\"\r\n                    value={Header.TokenNo}\r\n                    onChange={(e) => setHeader({ ...Header, TokenNo: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid container justify=\"space-around\" item xs={3}>\r\n\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      variant=\"outlined\"\r\n                      format=\"MM/dd/yyyy\"\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-inline\"\r\n\r\n                      label=\"WelfareDate\"\r\n                      value={selectedDate}\r\n                      onChange={handleDateChange}\r\n                      KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n\r\n\r\n\r\n                <Grid item xs={4}>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\"></FormLabel>\r\n                    <FormGroup row>\r\n\r\n                      <FormControlLabel\r\n                        label=\"IS PAF EMPLOYEE\"\r\n                        control={\r\n                          <Field\r\n                            name=\"IS PAF EMPLOYEE\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n\r\n                            value={Header.ISPAF}\r\n                            onChange={(e) => setHeader({ ...Header, ISPAF: e.target.value })}\r\n                          />\r\n\r\n                        }\r\n                      />\r\n\r\n\r\n                      <FormControlLabel\r\n                        label=\"IS STAFF\"\r\n                        control={\r\n                          <Field\r\n                            name=\"IS STAFF\"\r\n                            component={Checkbox}\r\n                            type=\"checkbox\"\r\n                            value={Header.ISSTAFF}\r\n                            onChange={(e) => setHeader({ ...Header, ISSTAFF: e.target.value })}\r\n                          />\r\n                        }\r\n                      />\r\n\r\n\r\n\r\n\r\n\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <h4>Contact</h4>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n                    required\r\n                    name=\"Profession\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Profession\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Profession}\r\n                    onChange={(e) => setHeader({ ...Header, Profession: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"Education\"\r\n                    component={Select}\r\n                    label=\"Education\"\r\n                    variant=\"outlined\"\r\n                    formControlProps={{ fullWidth: true }}\r\n                    value={Header.Education}\r\n                    onChange={(e) => setHeader({ ...Header, Education: e.target.value })}\r\n                  >\r\n                    <MenuItem value=\"male\">bs</MenuItem>\r\n                    <MenuItem value=\"female\">cs</MenuItem>\r\n                    <MenuItem value=\"Budapest\">\r\n                      ms\r\n                    </MenuItem>\r\n                  </Field>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"Fiqa\"\r\n                    component={Select}\r\n                    label=\"Fiqa\"\r\n                    variant=\"outlined\"\r\n                    formControlProps={{ fullWidth: true }}\r\n                    value={Header.Fiqa}\r\n                    onChange={(e) => setHeader({ ...Header, Fiqa: e.target.value })}\r\n                  >\r\n                    <MenuItem value=\"male\">a</MenuItem>\r\n                    <MenuItem value=\"female\">b</MenuItem>\r\n                    <MenuItem value=\"Budapest\">\r\n                      other\r\n                    </MenuItem>\r\n                  </Field>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"Cast\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Cast\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Cast}\r\n                    onChange={(e) => setHeader({ ...Header, Cast: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <h4>Requester Info</h4>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"Requestor Name\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Requestor Name\"\r\n                    variant=\"outlined\"\r\n                    value={Header.ReqName}\r\n                    onChange={(e) => setHeader({ ...Header, ReqName: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3} style={{ paddingRight: '7%' }}>\r\n                  <Field\r\n                    fullWidth\r\n                    name=\"Relationship With patients\"\r\n                    component={Select}\r\n                    label=\" Relationship With patients\"\r\n                    variant=\"outlined\"\r\n                    formControlProps={{ fullWidth: true }}\r\n                    value={Header.ReqRelationWithPatient}\r\n                    onChange={(e) => setHeader({ ...Header, ReqRelationWithPatient: e.target.value })}\r\n                  >\r\n                    <MenuItem value=\"male\">male</MenuItem>\r\n                    <MenuItem value=\"female\">Female</MenuItem>\r\n                    <MenuItem value=\"Budapest\">\r\n                      other\r\n                    </MenuItem>\r\n                  </Field>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"KidsMale\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"No of a Kid(Male)\"\r\n                    variant=\"outlined\"\r\n                    value={Header.MaleKids}\r\n                    onChange={(e) => setHeader({ ...Header, MaleKids: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"Kidsfemale\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"No of a Kid(Female)\"\r\n                    variant=\"outlined\"\r\n                    value={Header.FemaleKids}\r\n                    onChange={(e) => setHeader({ ...Header, FemaleKids: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"Requestor phone number\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Requestor phone number\"\r\n                    variant=\"outlined\"\r\n                    value={Header.ReqPhone}\r\n                    onChange={(e) => setHeader({ ...Header, ReqPhone: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3} style={{ paddingRight: '7%' }}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"Gardian\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Gardian\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Guardian}\r\n                    onChange={(e) => setHeader({ ...Header, Guardian: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"other Kids\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"other Kids\"\r\n                    variant=\"outlined\"\r\n                    value={Header.OtherKids}\r\n                    onChange={(e) => setHeader({ ...Header, OtherKids: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"No of brothers\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"No of brothers\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Brothers}\r\n                    onChange={(e) => setHeader({ ...Header, Brothers: e.target.value })}\r\n\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <TextField\r\n                    id=\"outlined-uncontrolled\"\r\n                    label=\"Monthly Income\"\r\n                    defaultValue=\"0\"\r\n                    variant=\"outlined\"\r\n                    value={Header.MonthlyIncome}\r\n                    onChange={(e) => setHeader({ ...Header, MonthlyIncome: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3} style={{ paddingRight: '7%' }}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"other Info\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"other Info\"\r\n                    variant=\"outlined\"\r\n                    value={Header.OtherInfo}\r\n                    onChange={(e) => setHeader({ ...Header, OtherInfo: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"No of sisters\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"No of sisters\"\r\n                    variant=\"outlined\"\r\n                    value={Header.Sisters}\r\n                    onChange={(e) => setHeader({ ...Header, Sisters: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Field\r\n                    fullWidth\r\n\r\n                    name=\"Family Member\"\r\n                    component={TextField}\r\n                    type=\"text\"\r\n                    label=\"Family Member\"\r\n                    variant=\"outlined\"\r\n                    value={Header.NoOFFamilyMembers}\r\n                    onChange={(e) => setHeader({ ...Header, NoOFFamilyMembers: e.target.value })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n\r\n\r\n\r\n                  <FormControl component=\"fieldset\" >\r\n                    <FormLabel component=\"legend\"></FormLabel>\r\n                    <FormGroup row>\r\n                      <Grid item >\r\n                        <FormControlLabel\r\n                          label=\"Married\"\r\n                          control={\r\n                            <Field\r\n                              name=\"IsMarried\"\r\n                              component={Checkbox}\r\n                              type=\"checkbox\"\r\n                              value=\"IsMarried\"\r\n                              value={Header.IsMarried}\r\n                              onChange={(e) => setHeader({ ...Header, IsMarried: e.target.value })}\r\n                            />\r\n\r\n                          }\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid >\r\n                        <FormControlLabel\r\n                          label=\"Able To Pay\"\r\n                          control={\r\n                            <Field\r\n                              name=\"IsAbleToPay\"\r\n                              component={Checkbox}\r\n                              type=\"checkbox\"\r\n                              value=\"IsAbleToPay\"\r\n                              value={Header.ISSTAFF}\r\n                              onChange={(e) => setHeader({ ...Header, IsAbleToPay: e.target.value })}\r\n                            />\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item >\r\n                        <FormControlLabel\r\n                          label=\"Is Earning\"\r\n                          control={\r\n                            <Field\r\n                              name=\"IsEarning\"\r\n                              component={Checkbox}\r\n                              type=\"checkbox\"\r\n                              value=\"IsEarning\"\r\n                              value={Header.IsEarning}\r\n                              onChange={(e) => setHeader({ ...Header, IsEarning: e.target.value })}\r\n                            />\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                      <Grid item >\r\n                        <FormControlLabel\r\n                          label=\"HaveGold\"\r\n                          control={\r\n                            <Field\r\n                              name=\"HaveGold\"\r\n                              component={Checkbox}\r\n                              type=\"checkbox\"\r\n                              value=\"HaveGold\"\r\n                              value={Header.HaveGold}\r\n                              onChange={(e) => setHeader({ ...Header, HaveGold: e.target.value })}\r\n                            />\r\n                          }\r\n                        />\r\n\r\n                      </Grid>\r\n\r\n\r\n\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <h4>Details</h4>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Materialtable />\r\n                </Grid>\r\n\r\n\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    onClick={reset}\r\n                    disabled={submitting || pristine}\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item style={{ marginTop: 16 }}>\r\n                  {/*   <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    disabled={submitting}\r\n                  >\r\n                    Submit\r\n                  </Button> */}\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n            <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n          </form>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\HPS\\client\\src\\components\\GlobalHeader.js",["147"],"import React from 'react';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { IoMdArrowRoundBack } from 'react-icons/io'\r\nimport { IoMdArrowRoundForward } from 'react-icons/io'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n}));\r\n\r\nexport default function GlobalHeader({ forward, back, title }) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.grow}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        aria-label=\"account of current user\"\r\n                        aria-haspopup=\"true\"\r\n                        color=\"inherit\"\r\n                    >\r\n                        <IoMdArrowRoundBack onClick={back} />\r\n                    </IconButton>\r\n                    <div style={{ textAlign: 'center', marginLeft: '45%' }}>\r\n                        <Typography className={classes.title} variant=\"h6\">\r\n                            {title}\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.grow} />\r\n                    <div>\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-haspopup=\"true\"\r\n                            color=\"inherit\"\r\n                        >\r\n                            <IoMdArrowRoundForward onClick={forward} />\r\n                        </IconButton>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","C:\\HPS\\client\\src\\components\\welfare\\Materialtable.js",["148"],"import React, { useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport { tableIcons } from '../Icons/Icons';\r\nexport default function Materialtable() {\r\n\r\n    const [columns, setColumns] = useState([\r\n        { title: 'Name', field: 'MemberName' },\r\n        { title: 'Surname', field: 'RelationWithPatient', initialEditValue: 'initial edit value' },\r\n        { title: 'Birth Year', field: 'MonthlyIncome', type: 'numeric' },\r\n    ]);\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    return (\r\n        <MaterialTable\r\n            icons={tableIcons}\r\n            title=\"Editable Preview\"\r\n            columns={columns}\r\n            data={data}\r\n            editable={{\r\n                onRowAdd: newData =>\r\n                    new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                            setData([...data, newData]);\r\n\r\n                            resolve();\r\n                        }, 1000)\r\n                    }),\r\n                onRowUpdate: (newData, oldData) =>\r\n                    new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                            const dataUpdate = [...data];\r\n                            const index = oldData.tableData.id;\r\n                            dataUpdate[index] = newData;\r\n                            setData([...dataUpdate]);\r\n\r\n                            resolve();\r\n                        }, 1000)\r\n                    }),\r\n                onRowDelete: oldData =>\r\n                    new Promise((resolve, reject) => {\r\n                        setTimeout(() => {\r\n                            const dataDelete = [...data];\r\n                            const index = oldData.tableData.id;\r\n                            dataDelete.splice(index, 1);\r\n                            setData([...dataDelete]);\r\n\r\n                            resolve()\r\n                        }, 1000)\r\n                    }),\r\n            }}\r\n        />\r\n    )\r\n}\r\n","C:\\HPS\\client\\src\\components\\Popup.js",["149"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nexport default function Popup({ msg, open, handleClose }) {\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n                style={{ marginTop: 50 }}\r\n                open={open}\r\n                autoHideDuration={8000}\r\n                onClose={handleClose}\r\n            >\r\n                <MuiAlert onClose={handleClose} elevation={6} variant=\"filled\">\r\n                    {msg}\r\n                </MuiAlert >\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}",["150","151"],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":1,"column":8,"nodeType":"158","messageId":"159","endLine":1,"endColumn":12},{"ruleId":"156","severity":1,"message":"160","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":16},{"ruleId":"156","severity":1,"message":"161","line":5,"column":10,"nodeType":"158","messageId":"159","endLine":5,"endColumn":16},{"ruleId":"156","severity":1,"message":"162","line":7,"column":10,"nodeType":"158","messageId":"159","endLine":7,"endColumn":20},{"ruleId":"156","severity":1,"message":"163","line":13,"column":21,"nodeType":"158","messageId":"159","endLine":13,"endColumn":31},{"ruleId":"156","severity":1,"message":"164","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":14},{"ruleId":"156","severity":1,"message":"165","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":17},{"ruleId":"156","severity":1,"message":"166","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":21},{"ruleId":"156","severity":1,"message":"167","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":25},{"ruleId":"156","severity":1,"message":"168","line":8,"column":8,"nodeType":"158","messageId":"159","endLine":8,"endColumn":19},{"ruleId":"156","severity":1,"message":"169","line":16,"column":8,"nodeType":"158","messageId":"159","endLine":16,"endColumn":20},{"ruleId":"156","severity":1,"message":"170","line":17,"column":8,"nodeType":"158","messageId":"159","endLine":17,"endColumn":16},{"ruleId":"156","severity":1,"message":"171","line":18,"column":8,"nodeType":"158","messageId":"159","endLine":18,"endColumn":12},{"ruleId":"156","severity":1,"message":"172","line":19,"column":8,"nodeType":"158","messageId":"159","endLine":19,"endColumn":15},{"ruleId":"156","severity":1,"message":"173","line":20,"column":8,"nodeType":"158","messageId":"159","endLine":20,"endColumn":14},{"ruleId":"156","severity":1,"message":"174","line":21,"column":8,"nodeType":"158","messageId":"159","endLine":21,"endColumn":15},{"ruleId":"156","severity":1,"message":"175","line":22,"column":8,"nodeType":"158","messageId":"159","endLine":22,"endColumn":18},{"ruleId":"156","severity":1,"message":"176","line":33,"column":7,"nodeType":"158","messageId":"159","endLine":33,"endColumn":17},{"ruleId":"156","severity":1,"message":"177","line":38,"column":9,"nodeType":"158","messageId":"159","endLine":38,"endColumn":16},{"ruleId":"178","severity":1,"message":"179","line":58,"column":20,"nodeType":"180","messageId":"181","endLine":58,"endColumn":22},{"ruleId":"178","severity":1,"message":"179","line":71,"column":20,"nodeType":"180","messageId":"181","endLine":71,"endColumn":22},{"ruleId":"156","severity":1,"message":"182","line":78,"column":9,"nodeType":"158","messageId":"159","endLine":78,"endColumn":19},{"ruleId":"156","severity":1,"message":"183","line":4,"column":10,"nodeType":"158","messageId":"159","endLine":4,"endColumn":18},{"ruleId":"156","severity":1,"message":"184","line":4,"column":20,"nodeType":"158","messageId":"159","endLine":4,"endColumn":25},{"ruleId":"156","severity":1,"message":"185","line":9,"column":3,"nodeType":"158","messageId":"159","endLine":9,"endColumn":7},{"ruleId":"156","severity":1,"message":"186","line":13,"column":3,"nodeType":"158","messageId":"159","endLine":13,"endColumn":13},{"ruleId":"156","severity":1,"message":"187","line":14,"column":3,"nodeType":"158","messageId":"159","endLine":14,"endColumn":12},{"ruleId":"156","severity":1,"message":"188","line":16,"column":3,"nodeType":"158","messageId":"159","endLine":16,"endColumn":12},{"ruleId":"156","severity":1,"message":"189","line":17,"column":3,"nodeType":"158","messageId":"159","endLine":17,"endColumn":14},{"ruleId":"156","severity":1,"message":"190","line":18,"column":3,"nodeType":"158","messageId":"159","endLine":18,"endColumn":19},{"ruleId":"156","severity":1,"message":"191","line":31,"column":7,"nodeType":"158","messageId":"159","endLine":31,"endColumn":19},{"ruleId":"156","severity":1,"message":"192","line":46,"column":10,"nodeType":"158","messageId":"159","endLine":46,"endColumn":27},{"ruleId":"156","severity":1,"message":"193","line":69,"column":10,"nodeType":"158","messageId":"159","endLine":69,"endColumn":27},{"ruleId":"156","severity":1,"message":"177","line":114,"column":9,"nodeType":"158","messageId":"159","endLine":114,"endColumn":16},{"ruleId":"156","severity":1,"message":"194","line":115,"column":10,"nodeType":"158","messageId":"159","endLine":115,"endColumn":15},{"ruleId":"156","severity":1,"message":"195","line":115,"column":17,"nodeType":"158","messageId":"159","endLine":115,"endColumn":25},{"ruleId":"156","severity":1,"message":"196","line":160,"column":9,"nodeType":"158","messageId":"159","endLine":160,"endColumn":32},{"ruleId":"156","severity":1,"message":"160","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":16},{"ruleId":"156","severity":1,"message":"197","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":22},{"ruleId":"156","severity":1,"message":"198","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":12},{"ruleId":"156","severity":1,"message":"199","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":21},{"ruleId":"156","severity":1,"message":"200","line":8,"column":8,"nodeType":"158","messageId":"159","endLine":8,"endColumn":11},{"ruleId":"156","severity":1,"message":"201","line":9,"column":8,"nodeType":"158","messageId":"159","endLine":9,"endColumn":18},{"ruleId":"156","severity":1,"message":"202","line":10,"column":8,"nodeType":"158","messageId":"159","endLine":10,"endColumn":22},{"ruleId":"156","severity":1,"message":"185","line":16,"column":3,"nodeType":"158","messageId":"159","endLine":16,"endColumn":7},{"ruleId":"156","severity":1,"message":"203","line":32,"column":3,"nodeType":"158","messageId":"159","endLine":32,"endColumn":13},{"ruleId":"156","severity":1,"message":"204","line":33,"column":3,"nodeType":"158","messageId":"159","endLine":33,"endColumn":13},{"ruleId":"156","severity":1,"message":"205","line":34,"column":3,"nodeType":"158","messageId":"159","endLine":34,"endColumn":21},{"ruleId":"156","severity":1,"message":"191","line":40,"column":7,"nodeType":"158","messageId":"159","endLine":40,"endColumn":19},{"ruleId":"156","severity":1,"message":"194","line":60,"column":10,"nodeType":"158","messageId":"159","endLine":60,"endColumn":15},{"ruleId":"156","severity":1,"message":"195","line":60,"column":17,"nodeType":"158","messageId":"159","endLine":60,"endColumn":25},{"ruleId":"156","severity":1,"message":"206","line":62,"column":10,"nodeType":"158","messageId":"159","endLine":62,"endColumn":15},{"ruleId":"156","severity":1,"message":"207","line":62,"column":17,"nodeType":"158","messageId":"159","endLine":62,"endColumn":25},{"ruleId":"156","severity":1,"message":"208","line":63,"column":19,"nodeType":"158","messageId":"159","endLine":63,"endColumn":29},{"ruleId":"209","severity":1,"message":"210","line":272,"column":74,"nodeType":"211","endLine":272,"endColumn":84},{"ruleId":"209","severity":1,"message":"210","line":305,"column":23,"nodeType":"211","endLine":305,"endColumn":38},{"ruleId":"209","severity":1,"message":"210","line":421,"column":23,"nodeType":"211","endLine":421,"endColumn":46},{"ruleId":"209","severity":1,"message":"210","line":697,"column":61,"nodeType":"211","endLine":697,"endColumn":79},{"ruleId":"156","severity":1,"message":"184","line":4,"column":20,"nodeType":"158","messageId":"159","endLine":4,"endColumn":25},{"ruleId":"156","severity":1,"message":"162","line":5,"column":10,"nodeType":"158","messageId":"159","endLine":5,"endColumn":20},{"ruleId":"156","severity":1,"message":"185","line":10,"column":3,"nodeType":"158","messageId":"159","endLine":10,"endColumn":7},{"ruleId":"156","severity":1,"message":"186","line":14,"column":3,"nodeType":"158","messageId":"159","endLine":14,"endColumn":13},{"ruleId":"156","severity":1,"message":"191","line":33,"column":7,"nodeType":"158","messageId":"159","endLine":33,"endColumn":19},{"ruleId":"156","severity":1,"message":"192","line":48,"column":10,"nodeType":"158","messageId":"159","endLine":48,"endColumn":27},{"ruleId":"156","severity":1,"message":"193","line":71,"column":10,"nodeType":"158","messageId":"159","endLine":71,"endColumn":27},{"ruleId":"156","severity":1,"message":"177","line":116,"column":9,"nodeType":"158","messageId":"159","endLine":116,"endColumn":16},{"ruleId":"156","severity":1,"message":"194","line":117,"column":10,"nodeType":"158","messageId":"159","endLine":117,"endColumn":15},{"ruleId":"156","severity":1,"message":"195","line":117,"column":17,"nodeType":"158","messageId":"159","endLine":117,"endColumn":25},{"ruleId":"156","severity":1,"message":"196","line":184,"column":9,"nodeType":"158","messageId":"159","endLine":184,"endColumn":32},{"ruleId":"156","severity":1,"message":"212","line":191,"column":17,"nodeType":"158","messageId":"159","endLine":191,"endColumn":25},{"ruleId":"156","severity":1,"message":"213","line":204,"column":10,"nodeType":"158","messageId":"159","endLine":204,"endColumn":17},{"ruleId":"156","severity":1,"message":"214","line":204,"column":19,"nodeType":"158","messageId":"159","endLine":204,"endColumn":29},{"ruleId":"156","severity":1,"message":"215","line":232,"column":9,"nodeType":"158","messageId":"159","endLine":232,"endColumn":15},{"ruleId":"156","severity":1,"message":"216","line":263,"column":9,"nodeType":"158","messageId":"159","endLine":263,"endColumn":24},{"ruleId":"156","severity":1,"message":"217","line":270,"column":9,"nodeType":"158","messageId":"159","endLine":270,"endColumn":22},{"ruleId":"209","severity":1,"message":"210","line":622,"column":31,"nodeType":"211","endLine":622,"endColumn":55},{"ruleId":"209","severity":1,"message":"210","line":639,"column":31,"nodeType":"211","endLine":639,"endColumn":53},{"ruleId":"209","severity":1,"message":"210","line":654,"column":31,"nodeType":"211","endLine":654,"endColumn":55},{"ruleId":"209","severity":1,"message":"210","line":669,"column":31,"nodeType":"211","endLine":669,"endColumn":54},{"ruleId":"156","severity":1,"message":"218","line":2,"column":10,"nodeType":"158","messageId":"159","endLine":2,"endColumn":14},{"ruleId":"156","severity":1,"message":"163","line":6,"column":21,"nodeType":"158","messageId":"159","endLine":6,"endColumn":31},{"ruleId":"156","severity":1,"message":"164","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":14},{"ruleId":"152","replacedBy":"219"},{"ruleId":"154","replacedBy":"220"},"no-native-reassign",["221"],"no-negated-in-lhs",["222"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Dialog' is defined but never used.","'tableIcons' is defined but never used.","'setColumns' is assigned a value but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'DialogActions' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Transition' is assigned a value but never used.","'classes' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleSkip' is assigned a value but never used.","'Checkbox' is defined but never used.","'Radio' is defined but never used.","'Link' is defined but never used.","'RadioGroup' is defined but never used.","'FormLabel' is defined but never used.","'FormGroup' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'defaultProps' is assigned a value but never used.","'DatePickerWrapper' is defined but never used.","'TimePickerWrapper' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'handleMouseDownPassword' is assigned a value but never used.","'FormHelperText' is defined but never used.","'clsx' is defined but never used.","'OutlinedInput' is defined but never used.","'Box' is defined but never used.","'InputLabel' is defined but never used.","'InputAdornment' is defined but never used.","'TimePicker' is defined but never used.","'DatePicker' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'posts' is assigned a value but never used.","'setposts' is assigned a value but never used.","'setOptions' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setrecID' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'AddRow' is assigned a value but never used.","'updateTableData' is assigned a value but never used.","'onClickDelete' is assigned a value but never used.","'fade' is defined but never used.",["221"],["222"],"no-global-assign","no-unsafe-negation"]